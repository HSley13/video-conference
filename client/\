import { useEffect, useRef, useState } from "react";
import { v4 as uuid } from "uuid";
import { useWebRTC } from "../Contexts/WebRTCContext";
import { Message, User } from "../Types/types";
import { FormatTime } from "../Utils/utils";

interface WsUser {
  id: string;
  name: string;
  imgUrl: string;
}

interface UsersListMsg {
  type: "users-list";
  users: WsUser[];
}

interface UserJoinedMsg {
  type: "user-joined";
  userID: string;
  userName: string;
  userPhoto: string;
}

interface UserLeftMsg {
  type: "user-left";
  userID: string;
}

interface OfferMsg {
  type: "offer";
  from: string;
  offer: RTCSessionDescriptionInit;
}

interface AnswerMsg {
  type: "answer";
  from: string;
  answer: RTCSessionDescriptionInit;
}

interface IceCandidateMsg {
  type: "ice-candidate";
  from: string;
  candidate: RTCIceCandidateInit;
}

interface ChatMessageMsg {
  type: "chat-message";
  id: string;
  text: string;
  time: string;
  user: Pick<User, "id" | "name" | "photo">;
}

type IncomingWsMessage =
  | UsersListMsg
  | UserJoinedMsg
  | UserLeftMsg
  | OfferMsg
  | AnswerMsg
  | IceCandidateMsg
  | ChatMessageMsg;

type OutgoingWsMessage =
  | {
      type: "offer";
      offer: RTCSessionDescriptionInit;
      to: string;
      from: string;
    }
  | {
      type: "answer";
      answer: RTCSessionDescriptionInit;
      to: string;
      from: string;
    }
  | {
      type: "ice-candidate";
      candidate: RTCIceCandidateInit;
      to: string;
      from: string;
    }
  | { type: "chat-message"; message: Message };

const extractSubFromJWT = (jwt: string): string | null => {
  try {
    const [, payload] = jwt.split(".");
    return JSON.parse(atob(payload)).sub as string;
  } catch {
    return null;
  }
};

export const useVideoConference = (
  roomId: string,
  userIdProp: string | undefined,
  userName: string,
  userPhoto: string,
  accessToken: string,
) => {
  const currentUserId = userIdProp ?? extractSubFromJWT(accessToken) ?? "";
  const { localStream, addRemoteStream, removeRemoteStream, setUsers } =
    useWebRTC();
  const socketRef = useRef<WebSocket | null>(null);
  const peersRef = useRef<Record<string, RTCPeerConnection>>({});
  const [messages, setMessages] = useState<Message[]>([]);
  const seenMessageIds = useRef<Set<string>>(new Set());
  const knownUserIds = useRef<Set<string>>(new Set());

  useEffect(() => {
    if (!currentUserId || !accessToken) return;

    const url =
      `ws://localhost:3002/video-conference/ws/${roomId}/${currentUserId}` +
      `?access_token=${encodeURIComponent(accessToken)}`;

    function openSocket(): void {
      socketRef.current = new WebSocket(url);

      socketRef.current.onmessage = async (ev) => {
        const payload = JSON.parse(ev.data) as IncomingWsMessage;

        switch (payload.type) {
          case "users-list": {
            const others = payload.users.filter((u) => u.id !== currentUserId);

            knownUserIds.current = new Set(others.map((u) => u.id));

            setUsers(
              others.map<User>((u) => ({
                id: u.id,
                name: u.name,
                imgUrl: u.imgUrl,
                isAudioOn: true,
                isVideoOn: true,
                isPinned: false,
                videoStream: null,
              })),
            );

            others.forEach((u) => createPeer(u.id));
            break;
          }

          case "user-joined": {
            const id = payload.userID;
            if (id !== currentUserId && !knownUserIds.current.has(id)) {
              knownUserIds.current.add(id);
              setUsers((prev) => [
                ...prev,
                {
                  id,
                  name: payload.userName,
                  imgUrl: payload.userPhoto,
                  isAudioOn: true,
                  isVideoOn: true,
                  isPinned: false,
                  videoStream: null,
                },
              ]);
              createPeer(id);
            }
            break;
          }

          case "user-left": {
            const id = payload.userID;
            knownUserIds.current.delete(id);
            setUsers((prev) => prev.filter((u) => u.id !== id));
            removeRemoteStream(id);
            closePeer(id);
            break;
          }

          case "offer":
            if (payload.from !== currentUserId) {
              await handleOffer(payload.offer, payload.from);
            }
            break;

          case "answer":
            if (payload.from !== currentUserId) {
              await handleAnswer(payload.answer, payload.from);
            }
            break;

          case "ice-candidate":
            if (payload.from !== currentUserId) {
              await handleCandidate(payload.candidate, payload.from);
            }
            break;

          case "chat-message":
            if (!seenMessageIds.current.has(payload.id)) {
              seenMessageIds.current.add(payload.id);
              setMessages((prev) => [
                ...prev,
                {
                  id: payload.id,
                  text: payload.text,
                  time: payload.time,
                  user: payload.user,
                },
              ]);
            }
            break;

          default:
            const _exhaustive: never = payload;
            console.warn("[WS] unhandled message:", _exhaustive);
        }
      };

      socketRef.current.onclose = () => {
        console.warn("[WS] closed – reconnecting in 3 s…");
        setTimeout(openSocket, 3_000);
      };
    }

    openSocket();

    return () => {
      socketRef.current?.close();
      Object.values(peersRef.current).forEach((pc) => pc.close());
    };
  }, [roomId, currentUserId, accessToken, setUsers, removeRemoteStream]);

  const sendChatMessage = (text: string): void => {
    if (!socketRef.current || !text.trim()) return;

    const msg: Message = {
      id: uuid(),
      text,
      time: FormatTime(new Date()),
      user: { id: currentUserId, name: userName, photo: userPhoto },
    };

    if (!seenMessageIds.current.has(msg.id)) {
      seenMessageIds.current.add(msg.id);
      setMessages((prev) => [...prev, msg]);
    }

    const outgoing: OutgoingWsMessage = { type: "chat-message", message: msg };
    socketRef.current.send(JSON.stringify(outgoing));
  };

  const createPeer = async (remoteId: string): Promise<void> => {
    if (remoteId === currentUserId || peersRef.current[remoteId]) return;

    const pc = new RTCPeerConnection({
      iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
    });

    localStream
      ?.getTracks()
      .forEach((track) => pc.addTrack(track, localStream));

    pc.ontrack = (ev) => addRemoteStream(remoteId, ev.streams[0]);

    pc.onicecandidate = (ev) => {
      if (ev.candidate && socketRef.current) {
        const msg: OutgoingWsMessage = {
          type: "ice-candidate",
          candidate: ev.candidate,
          to: remoteId,
          from: currentUserId,
        };
        socketRef.current.send(JSON.stringify(msg));
      }
    };

    await pc.setLocalDescription(await pc.createOffer());

    const offerMsg: OutgoingWsMessage = {
      type: "offer",
      offer: pc.localDescription!,
      to: remoteId,
      from: currentUserId,
    };
    socketRef.current?.send(JSON.stringify(offerMsg));

    peersRef.current[remoteId] = pc;
  };

  const handleOffer = async (
    offer: RTCSessionDescriptionInit,
    remoteId: string,
  ): Promise<void> => {
    if (peersRef.current[remoteId]) return;

    const pc = new RTCPeerConnection({
      iceServers: [{ urls: "stun:stun.l.google.com:19302" }],
    });

    localStream
      ?.getTracks()
      .forEach((track) => pc.addTrack(track, localStream));
    pc.ontrack = (ev) => addRemoteStream(remoteId, ev.streams[0]);

    pc.onicecandidate = (ev) => {
      if (ev.candidate && socketRef.current) {
        const msg: OutgoingWsMessage = {
          type: "ice-candidate",
          candidate: ev.candidate,
          to: remoteId,
          from: currentUserId,
        };
        socketRef.current.send(JSON.stringify(msg));
      }
    };

    await pc.setRemoteDescription(offer);
    await pc.setLocalDescription(await pc.createAnswer());

    const answerMsg: OutgoingWsMessage = {
      type: "answer",
      answer: pc.localDescription!,
      to: remoteId,
      from: currentUserId,
    };
    socketRef.current?.send(JSON.stringify(answerMsg));

    peersRef.current[remoteId] = pc;
  };

  const handleAnswer = async (
    answer: RTCSessionDescriptionInit,
    remoteId: string,
  ): Promise<void> => {
    await peersRef.current[remoteId]?.setRemoteDescription(answer);
  };

  const handleCandidate = async (
    candidate: RTCIceCandidateInit,
    remoteId: string,
  ): Promise<void> => {
    await peersRef.current[remoteId]?.addIceCandidate(
      new RTCIceCandidate(candidate),
    );
  };

  const closePeer = (remoteId: string): void => {
    peersRef.current[remoteId]?.close();
    delete peersRef.current[remoteId];
  };

  return {
    messages,
    sendChatMessage,
  };
};
